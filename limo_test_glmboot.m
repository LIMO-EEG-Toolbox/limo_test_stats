function [avg_err,ci_err] = limo_test_glmboot(varargin)

% routine the take a H0_folder generated by LIMO tools and return the error
% rate for the different files present - also make a figure to see if there
% is a consistency in space/frequency/time in the effect observed,
% typically due to non stationarity
%
% FORMAT [avg_err,ci_err] = limo_test_glmboot(H0,'alphavalue',0.05,'figure','on')
% 
% INPUTS H0 is a cell array of H0 folders (1 or many)
%        'figure' gives the option to check the space/frequency/time of
%        effects - note if multiple H0 are given, data must all be of 
%        the same dimension
%
% OUTPUTS avg_err is the average error rate over the resamples 
%         ci_err is the binomial 95% confidence interal
%         
% Cyril Pernet Septembre 2020

% defaults
alphavalue  = 0.05;
figurevalue = 'on';

if ~iscell(varargin{1})
    error('cellarray expected as input')
else
    H0 = varargin{1};
    for key = 2:nargin
        if contains(varargin{key},'alpha','IgnoreCase',true)
            alphavalue = varargin{key+1};
        elseif contains(varargin{key},'figure','IgnoreCase',true)
            figurevalue = varargin{key+1};
        end
    end
end

% get errors           
for folder = 1:length(H0)
    
    fileindex = 1;
    content = dir(fullfile(H0{folder},'H0_*.mat'));
    if isempty(content)
        fprintf('%s is empty\n',H0{folder})
    else
        for c=1:size(content,1)
            fprintf('loading %s \n',H0{folder})
            if ~contains(content(c).name,'Betas') && ~contains(content(c).name,'tfce') ...
                    && ~contains(content(c).name,'R2')
                data = load(fullfile(content(c).folder,content(c).name));
                data = data.(cell2mat(fieldnames(data)));
                % compute the number of error and average error
                if ndims(data) == 4
                    data(isnan(data(:,1,1,1)),:,:,:) = [];
                    Ntests         = prod(size(data,[1 2]));
                    samp           = size(data,4):-200:200;
                    err{folder,fileindex}  = sum(squeeze(data(:,:,end,:)) < alphavalue,3); % number of errors
                    for s = length(samp):-1:1
                        tmp  = sum(squeeze(data(:,:,end,1:samp(s))) < alphavalue,3);
                        [avg_err{folder,fileindex}(s),ci_err{folder,fileindex}(:,s)] = binofit(sum(tmp(:)),samp(s)*Ntests);
                    end
                elseif ndims(data) == 5
                    data(isnan(data(:,1,1,1,1)),:,:,:,:) = [];
                    Ntests         = prod(size(data,[1 2 3]));
                    samp           = size(data,5):-200:200;
                    err{folder,fileindex}  = sum(squeeze(data(:,:,:,end,:)) < alphavalue,3); % number of errors
                    for s = length(samp):-1:1
                        tmp  = sum(squeeze(data(:,:,:,end,1:samp(s))) < alphavalue,4);
                        [avg_err{folder,fileindex}(s),ci_err{folder,fileindex}(:,s)] = binofit(sum(tmp(:)),samp(s)*Ntests);
                    end
                else
                    error('null data files are expected to be 4 or 5 dimensionals')
                end
                
                if folder == 1
                    content(c).name(strfind(content(c).name,'_')) = ' ';
                    filename{fileindex} = content(c).name; % assuming each H0 is the same
                end
                fileindex = fileindex+1;
            end
        end
    end
end

% make figure
if strcmpi(figurevalue,'on')   
    figure('Name','cell-wise error density');
    t = tiledlayout('flow');
    for c=1:size(err,2)
        tmp = err{1,c};
        for folder = 2:size(err,1)
            tmp = tmp + err{folder,c};
        end
        nexttile(t); 
        if ndims(tmp) ==2 %#ok<ISMAT>
            imagesc(tmp)
        else
            imagesc(squeeze(mean(tmp,2)))
        end
        title(sprintf('%s',filename{c}(1:end-4)))
    end
    
    figure('Name','type 1 error')
    cc = limo_color_images(size(err,1));
    for c=1:size(err,2)
        subplot(size(err,2)+1,1,c); hold on
        for folder = size(err,1):-1:1
            low = avg_err{folder,c}(end) - ci_err{folder,c}(1,end);
            high = ci_err{folder,c}(2,end) - avg_err{folder,c}(end);
            errorbar(folder,avg_err{folder,c}(end),low,high,'LineWidth',2,'Color',cc(folder,:))
        end
        plot(0:size(err,1),repmat(alphavalue,1,size(err,1)+1),'k--')
        title(sprintf('%s',filename{c}(1:end-4))); grid on
    end
     subplot(size(err,2)+1,1,size(err,2))
     AVG = zeros(1,length(avg_err{folder,c}));
     LOW = AVG ; HIGH = AVG;
     for c=1:size(err,2)
         for folder = 1:size(err,1)
             AVG = AVG + avg_err{folder,c};
             LOW = LOW + ci_err{folder,c}(1,:);
             HIGH = HIGH + ci_err{folder,c}(2,:);             
         end
     end
     AVG  = AVG ./ (size(err,1)*fileindex-1);
     LOW  = LOW ./ (size(err,1)*fileindex-1);
     HIGH = HIGH ./ (size(err,1)*fileindex-1);
     plot(samp,AVG,'LineWidth',2);
     hold on; plot(samp,LOW,'k--','LineWidth',1);
     plot(samp,HIGH,'k--','LineWidth',1);
     grid on; title('average convergence rate')
end
